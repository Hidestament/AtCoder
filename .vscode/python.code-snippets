{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Union Find Tree": {
		"prefix": "unionfindtree",
		"body": [
		"class UnionFindTree:",
		"\tdef __init__(self, n):",
		"\t\tself.parents = [-1] * n",
		"",
		"\tdef find(self, x):",
		"\t\tif self.parents[x] < 0:",
		"\t\t\treturn x",
		"\t\telse:",
		"\t\t\tself.parents[x] = self.find(self.parents[x])",
		"\t\t\treturn self.find(self.parents[x])",
		"",
		"\tdef union(self, x, y):",
		"\t\tx = self.find(x)",
		"\t\ty = self.find(y)",
		"\t\tif x == y:",
		"\t\t\treturn",
		"\t\tif self.parents[x] > self.parents[y]:",
		"\t\t\tx, y = y, x",
		"\t\tself.parents[x] += self.parents[y]",
		"\t\tself.parents[y] = x",
		"",
		"\tdef same_check(self, x, y):",
		"\t\treturn self.find(x) == self.find(y)",
		"",
		"\tdef size(self, x):",
		"\t\treturn -1 * self.parents[self.find(x)]",
		"",
		],
		"description": "Union Find Tree"
	},
	"list input": {
		"prefix": ["input", "list(map(int, input()))"],
		"body": [
		"list(map(int, input().split()))",
		],
		"description": "list input"
	},
	"recursion limit": {
		"prefix": ["sys", "import sys"],
		"body": [
		"import sys",
		"sys.setrecursionlimit(10**7)",
		],
		"description": "update recursion limit"
	},
	"int(input())": {
		"prefix": "int(input())",
		"body": [
		"int(input())",
		],
		"description": "int input"
	},
	"str(input())": {
		"prefix": "str(input())",
		"body": [
		"str(input())",
		],
		"description": "string input"
	},
	"map(int, input().split())": {
		"prefix": "map(int, input().split())",
		"body": [
		"map(int, input().split())",
		],
		"description": "Input of Multiple Integers"
	},
	"popcount": {
		"prefix": "popcount",
		"body": [
		"def popcount(x):",
		"\t'''xの立っているビット数をカウントする関数",
		"\t(xは64bit整数)'''",
		"",
		"\t# 2bitごとの組に分け、立っているビット数を2bitで表現する",
		"\tx = x - ((x >> 1) & 0x5555555555555555)",
		"",
		"\t# 4bit整数に 上位2bit + 下位2bit を計算した値を入れる",
		"\tx = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)",
		"",
		"\tx = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f # 8bitごと",
		"\tx = x + (x >> 8) # 16bitごと",
		"\tx = x + (x >> 16) # 32bitごと",
		"\tx = x + (x >> 32) # 64bitごと = 全部の合計",
		"\treturn x & 0x0000007f",
		],
		"description": "2進数展開した整数のうち、1が立っている箇所を数える"
	},
	"template": {
		"prefix": "template",
		"body": [
		"\"\"\"",
		"問題名",
		"問題リンク: ",
		"\"\"\"",
		],
		"description": "AtCoderやるときのテンプレート"
	},
	"graph input": {
		"prefix": "graph input",
		"body": [
		"graph = [[] for _ in range(N)]",
		"for _ in range(M):",
		"\tu, v = map(int, input().split())",
		"\tu -= 1",
		"\tv -= 1",
		"\tgraph[u].append(v)",
		"\tgraph[v].append(u)",
		],
		"description": "input of G = (N, M)"
	},
	"Binary Indexed Tree": {
		"prefix": "BIT",
		"body": [
		"class BinaryIndexedTree:",
		"\t\"\"\"",
		"\tA = [a0, a1, a2, ..., an-1]",
		"\t元のAの配列は0-indexだが, BIT上では1-indexで扱う",
		"\t\"\"\"",
		"",
		"\tdef __init__(self, n=10**6):",
		"\t\tself.size = n + 1",
		"\t\tself.tree = [0] * (n + 1)",
		"\t\tself.depth = n.bit_length()",
		"",
		"\tdef update(self, i, x):",
		"\t\t\"\"\"",
		"\t\tai += x を する",
		"\t\ti: 0-index",
		"\t\t\"\"\"",
		"\t\t# 1-indexに直す",
		"\t\tpos = i + 1",
		"\t\twhile pos <= self.size:",
		"\t\t\tself.tree[pos] += x",
		"\t\t\t# 真上の位置は, iにiのLSBを加えたモノ",
		"\t\t\tpos += pos & -pos",
		"",
		"\tdef sum(self, i):",
		"\t\t\"\"\"",
		"\t\ta[0] + a[1] + ... + a[i] を 求める",
		"\t\ti は 0-index",
		"\t\t\"\"\"",
		"\t\tpos = i + 1",
		"\t\ts = 0",
		"\t\twhile pos > 0:",
		"\t\t\ts += self.tree[pos]",
		"\t\t\t# 左上は i に iのLSBを引いたモノ",
		"\t\t\tpos -= pos & -pos",
		"\t\treturn s",
		"",
		"\tdef sum_range(self, i, j):",
		"\t\t\"\"\"",
		"\t\ta[i] + a[i+1] + ... + a[j] を 求める",
		"\t\ti, j は 0-index",
		"\t\t\"\"\"",
		"\t\treturn self.sum(j) - self.sum(i - 1)",
		"",
		"\tdef lower_bound(self, x):",
		"\t\t\"\"\"",
		"\t\ta0 + a1 + ... + ai >= x となる最小のiを取得.",
		"\t\t各項は非負である必要がある",
		"\t\tiは0 - index",
		"\t\t\"\"\"",
		"\t\tif x <= 0:",
		"\t\t\treturn -1",
		"",
		"\t\tk = 1 << (self.size.bit_length() - 1)",
		"\t\tpos = 0",
		"\t\ts = 0",
		"\t\twhile k > 0:",
		"\t\t\t# (pos + kが配列の長さを超えない) and 和がxを超えない",
		"\t\t\tif (pos + k < self.size) and self.tree[pos + k] + s < x:",
		"\t\t\t\ts += self.tree[pos + k]",
		"\t\t\t\tpos += k",
		"\t\t\t# 1つ下の段に行く",
		"\t\t\tk //= 2",
		"\t\treturn pos",
		],
		"description": "Binary Indexed Tree (Fenwick Tree)"
	},
	"compress": {
		"prefix": "compress",
		"body": [
		"def compress(A):",
		"\tB = sorted(set(A))",
		"\tzipped = {}",
		"\tunzipped = {}",
		"\tfor i, x in enumerate(B):",
		"\t\tzipped[x] = i",
		"\t\tunzipped[i] = x",
		"\treturn zipped, unzipped",
		],
		"description": "座標圧縮"
	},
	"Strongly-Connected Components": {
		"prefix": "scc",
		"body": [
		"def scc(N, G, RG):",
		"\t\"\"\"Strongly-Connected Components",
		"",
		"\tArgs:",
		"\t\tN (int): number of vertex_",
		"\t\tG (List[list(int)]): adjacent list",
		"\t\tRG (List[list(int)]): reverse adjacent list",
		"",
		"\t\"\"\"",
		"",
		"\tdef dfs(now):",
		"\t\tseen[now] = 1",
		"\t\tfor to in G[now]:",
		"\t\t\tif not seen[to]:",
		"\t\t\t\tdfs(to)",
		"\t\torder.append(now)",
		"",
		"\tdef rdfs(now, col):",
		"\t\tseen[now] = 1",
		"\t\tgroup[now] = col",
		"\t\tfor to in RG[now]:",
		"\t\t\tif not seen[to]:",
		"\t\t\t\trdfs(to, col)",
		"",
		"\torder, seen = [], [0] * N",
		"",
		"\tfor v in range(N):",
		"\t\tif not seen[v]:",
		"\t\t\tdfs(v)",
		"",
		"\tgroup, seen = [None] * N, [0] * N",
		"\tlabel = 0",
		"\tfor v in order[::-1]:",
		"\t\tif not seen[v]:",
		"\t\t\trdfs(v, label)",
		"\t\t\tlabel += 1",
		"",
		"\treturn label, group",
		],
		"description": "Strongly-Connected Components"
		},
	"combination on Modulo": {
			"prefix": "combination",
			"body": [
			"fact = [1] * (N+1)  # fact[i] = i! % mod",
			"inv = [1] * (N+1)  # inv[i] = i^-1 % mod, factinvの計算用",
			"inv[0] = 0",
			"factinv = [1] * (N+1)  # factinv[i] = (i!)^-1 % mod",
			"",
			"for i in range(2, N+1):",
			"\tfact[i] = (fact[i-1] * i) % mod",
			"\tinv[i] = (-inv[mod % i] * (mod // i)) % mod",
			"\tfactinv[i] = (factinv[i-1] * inv[i]) % mod",
			"",
			"",
			"def cmb_mod(n, r):",
			"\tif (r < 0) or (n < r):",
			"\t\treturn 0",
			"\tr = min(r, n-r)",
			"\treturn fact[n] * factinv[r] * factinv[n-r] % mod",
			],
			"description": "Combination on Modulo"
	},
	"warshall floyd法": {
		"prefix": "warshall_floyd",
		"body": [
		"INF = 10**10",
		"def warshall_floyd(graph):",
		"\tn = len(graph)",
		"\tdist = [[INF] * n for _ in range(n)]",
		"",
		"\t# 初期状態: i -> i は距離0",
		"\tfor i in range(n):",
		"\t\tdist[i][i] = 0",
		"",
		"\t# 初期状態: 隣接頂点のコストをdistに記録する",
		"\tfor now in range(n):",
		"\t\tfor to, cost in graph[now]:",
		"\t\t\tdist[now][to] = cost",
		"",
		"\t# DP",
		"\tfor k in range(n):  # 中継点",
		"\t\tfor i in range(n):  # 始点",
		"\t\t\tfor j in range(n):  # 終点",
		"\t\t\t\tdist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])",
		"\treturn dist",
		],
		"description": "全点対間最短経路"
	},
}
